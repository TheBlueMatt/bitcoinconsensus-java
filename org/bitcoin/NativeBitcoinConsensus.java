/**
 * Copyright 2015 Matt Corallo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.bitcoin;

import java.lang.ref.SoftReference;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.EnumSet;

import com.google.common.base.Preconditions;


/**
 * <p>This class holds native methods to handle Bitcoin Consensus verification.</p>
 *
 * <p>You should use the libbitcoinconsensus library generated by Bitcoin Core during build, as well as the wrapper
 * library you can find at https://github.com/TheBlueMatt/bitcoinconsensus-java.</p>
 *
 * <p>Copy libjavabitcoinconsensus.so and libbitcoinconsensus.so to your system library path or point the JVM to the
 * folder containing them with -Djava.library.path</p>
 */
public class NativeBitcoinConsensus {
    public static boolean enabled = false;
    static {
        try {
            System.loadLibrary("bitcoinconsensus");
            System.loadLibrary("javabitcoinconsensus");
            enabled = true;
        } catch (UnsatisfiedLinkError e) {
            enabled = false;
        }
    }

    // We use static final ints instead of enums so that javah exports them

    /** Validate P2SH subscripts */
    public static final int P2SH = 1 << 0;
    /** Validate signatures are standard, minmally-encoded DER */
    public static final int DERSIG = 1 << 1;
    /** Validate CHECKLOCKTIMEVERIFY scripts */
    public static final int CHECKLOCKTIMEVERIFY = 1 << 2;

    private static ThreadLocal<SoftReference<ByteBuffer>> nativeScriptPubKeyBuffer = new ThreadLocal<SoftReference<ByteBuffer>>();
    private static ThreadLocal<SoftReference<ByteBuffer>> nativeTxToBuffer = new ThreadLocal<SoftReference<ByteBuffer>>();
    /**
     * Verifies the given secp256k1 signature in native code.
     * Calling when enabled == false is undefined (probably library not loaded)
     *
     * @param scriptPubKey The scriptPubKey of the previous transaction which we are spending
     * @param txTo The transaction which is spending the scriptPubKey
     * @param nIn The index of the input in txTo which is being verified
     * @param flags The consensus soft-forks to enforce
     */
    public static boolean script_verify(byte[] scriptPubKey, byte[] txTo, int nIn, int flags) {
        if (!enabled)
            throw new UnsatisfiedLinkError("Failed to load libbitcoinconsensus and libjavabitcoinconsensus");
        Preconditions.checkArgument(txTo.length > 0 && nIn >= 0);

        ByteBuffer scriptPubKeyBuff;
        SoftReference<ByteBuffer> scriptPubKeyBuffRef = nativeScriptPubKeyBuffer.get();
        if (scriptPubKeyBuffRef == null) {
            scriptPubKeyBuff = ByteBuffer.allocateDirect(scriptPubKey.length + 4);
            scriptPubKeyBuff.order(ByteOrder.nativeOrder());
            nativeScriptPubKeyBuffer.set(new SoftReference<ByteBuffer>(scriptPubKeyBuff));
        } else {
            scriptPubKeyBuff = scriptPubKeyBuffRef.get();
            if (scriptPubKeyBuff == null || scriptPubKeyBuff.capacity() < scriptPubKey.length + txTo.length + 4) {
                scriptPubKeyBuff = ByteBuffer.allocateDirect(scriptPubKey.length + 4);
                scriptPubKeyBuff.order(ByteOrder.nativeOrder());
                nativeScriptPubKeyBuffer.set(new SoftReference<ByteBuffer>(scriptPubKeyBuff));
            }
        }

        scriptPubKeyBuff.rewind();
        scriptPubKeyBuff.putInt(scriptPubKey.length);
        scriptPubKeyBuff.put(scriptPubKey);

        ByteBuffer txToBuff;
        SoftReference<ByteBuffer> txToBuffRef = nativeTxToBuffer.get();
        if (txToBuffRef == null) {
            txToBuff = ByteBuffer.allocateDirect(txTo.length + 4);
            txToBuff.order(ByteOrder.nativeOrder());
            nativeTxToBuffer.set(new SoftReference<ByteBuffer>(txToBuff));
        } else {
            txToBuff = txToBuffRef.get();
            if (txToBuff == null || txToBuff.capacity() < txTo.length + 4) {
                txToBuff = ByteBuffer.allocateDirect(txTo.length + 4);
                txToBuff.order(ByteOrder.nativeOrder());
                nativeTxToBuffer.set(new SoftReference<ByteBuffer>(txToBuff));
            }
        }

        txToBuff.rewind();
        txToBuff.putInt(txTo.length);
        txToBuff.put(txTo);

        int res = consensus_script_verify(scriptPubKeyBuff, txToBuff, nIn, flags);
        // If you're hitting res == -1 here, your scriptPubKey/txTo are of an invalid format or nIn is not an input in
        // txTo
        Preconditions.checkArgument(res != -1);
        return res == 1;
    }

    /**
     * @param scriptPubKey format is native-endian int scriptPubKeyLength, byte[scriptPubKeyLength] scriptPubKey
     * @param txTo format is native-endian int txToLength, byte[txToLength] scriptPubKey
     * @returns 1 if the script check succeeds, 0 if the script check fails, -1 if there is a deserialization error
     */
    private static native int consensus_script_verify(ByteBuffer scriptPubKey, ByteBuffer txTo, int nIn, int flags);
}
